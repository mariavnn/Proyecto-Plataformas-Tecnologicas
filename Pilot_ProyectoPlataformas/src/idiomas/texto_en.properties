#Portada
tituloCover = Mass - Storage Systems
carrera = Systems Engineering
facultad = Faculty of Architectures and Engineering
univ = University Of Pamplona
materia = Technological Platforms

#Menu Desplegable
menu_contenido=Content
menu_objetivos=Objectives
menu_tema=Topic
menu_quiz_parte_1=Quiz Part 1
menu_quiz_parte_2=Quiz Part 2


#Contenedor Padre
titulo = Mass - Storage Systems

#Contenedores Hijos

##Contenido - Hijo[0]
tituloCont = Content
tema1 = Topic 1: Overview of mass storage structure
tema2 = Topic 2: HDD Programming
tema3 = Topic 3: NVM Programming
tema4 = Topic 4: Error Detection and Correction
tema5 = Topic 5: Storage Device Management
tema6 = Topic 6: Swap Space Management
tema7 = Topic 7: Storage Attachment
tema8 = Topic 8: RAID Structure

##Objetivos - Hijo[1]
tituloObjetivos = Objectives
descripcionObj = The presentation will address the description of secondary storage devices, detailing their physical structures and how these influence their uses and functionalities. Different types such as hard drives, SSDs, or tape drives will be explored, highlighting their designs and how they impact speed, capacity, and durability. Additionally, it will analyze performance characteristics, I/O algorithms, and the services that operating systems provide to enhance massive storage, including techniques like RAID to optimize data redundancy and access speed.

##Topic 1 - Hijo[2]
sub1txtTopic1 = HDDs operate by spinning magnetically coated disks beneath moving read/write heads.
sub2txtTopic1 = Non-volatile memory devices like solid-state drives (SSDs) come in various forms like USB drives. While they're typically more reliable than HDDs, they're also more expensive per MB, might have a shorter lifespan requiring careful handling, offer less capacity, but boast significantly faster performance.
tituloTopic1 = Overview of Mass Storage Structure
txtTopic1 = The primary forms of secondary storage in modern computers are hard disk drives (HDDs) and non-volatile memory devices (NVM).


##Topic 2 - Hijo[3]
tituloTopic2 = HDD Programming
txtTopic2 = The operating system must optimize hardware usage to ensure fast access times and optimal bandwidth on disk drives. In disk programming, various sources generate disk I/O requests, from the operating system to system and user processes. These requests include details like input/output mode, disk address, memory address, and sectors to transfer. In the past, the operating system handled queue management and disk head scheduling, but now these tasks are the responsibility of storage devices and controllers.
subTituTopic2 = Disk Scheduling Algorithms:
sub1TxtTopic2 = The SCAN algorithm, known as the elevator algorithm, manages disk requests by moving the disk arm from one end to the other, servicing requests along its path. However, requests concentrated at the opposite end from the initial arm movement may experience longer wait times if unevenly distributed across the disk.
sub2txtTopic2 = It offers more consistent wait times than SCAN. Here's how it works: the head moves from one end of the disk to the other, servicing requests along the way. Once it reaches the end, it quickly returns to the beginning of the disk without servicing requests on the return trip. It considers cylinders as a circular list, moving from the last cylinder to the first.

##Topic3 - Hijo[4]
tituloTopic3 = NVM Programming
txtTopic3 = In RHEL 7, the NOOP method (no scheduling) is employed, consolidating adjacent Logical Block Address (LBA) requests, eliminating disk head or rotational latency. Non-volatile memory (NVM) excels in random I/O, whereas hard disk drives (HDD) perform better in sequential tasks. Both exhibit comparable performance. NVM yields significantly higher Input/Output Operations Per Second (IOPS) than HDDs (hundreds of thousands versus hundreds). However, the performance advantage of NVM might diminish due to write amplification, where a single write triggers garbage collection and numerous reads/writes, affecting overall efficiency.

##Topic4 - Hijo[5]
tituloTopic4 = Error Detection and Correction
sub1TxtTopic4 = Error detection is crucial in various computing aspects like memory, networks, and storage.
sub2TxtTopic4 = It determines if an issue, such as a bit flip, has occurred and might halt operations upon detection.
sub3TxtTopic4 = One method, utilizing a parity bit, checks for errors using modular arithmetic to calculate, store, and compare values in fixed-length words.
sub4TxtTopic4 = Another common error detection technique, especially in networks, is cyclic redundancy checking (CRC), using a hash function to identify multi-bit errors. However, error correction code (ECC) goes beyond mere detection; it can correct certain errors. Soft errors are correctable, whereas hard errors are only identified but not corrected.

##Topic5 - Hijo[6]
tituloTopic5 = Storage Device Manager
txtTopic5 = For a disk to store files, the operating system needs to establish its own data structures on the disk. This logical formatting, also known as "creating a file system," is essential for file management. The root partition typically hosts the operating system, while other partitions may contain additional operating systems, file systems, or remain in a raw state. Once successfully completed, the file system is added to the mount table, enabling access. The boot block contains essential information directing either to the boot volume or to a set of blocks containing code to load the kernel from the file system. For applications requiring direct block management, bypassing the operating system, direct access to raw disk is available. During system initialization, the bootstrap program stored in read-only memory starts the system. The bootstrap loader program resides in the boot blocks of the boot partition, orchestrating the system boot.

##Topic6 - Hijo[7]
tituloTopic6 = Swap Space Management
txtTopic6 = Used to transfer entire processes (swapping) or pages (paging) from RAM to secondary storage when RAM capacity isn\u2019t sufficient for all processes. The operating system handles swap space management. Secondary storage is slower than RAM, so optimizing performance becomes crucial. It's often possible to have multiple swap spaces, reducing I/O load on individual devices. Using dedicated devices is preferable, which can exist in raw partitions or files within a file system for easier addition.

##Topic7 - Hijo[8]
tituloTopic7 = Storage Attachment
sub1TxtTopic7 = Computers access storage in three main ways: host-attached, network-attached, and in the cloud.
sub2TxtTopic7 = Host-attached access involves local I/O ports and utilizes various technologies. Storage buses like USB, FireWire, and Thunderbolt are used to connect multiple devices, while high-end systems often employ Fibre Channel (FC). FC is a high-speed serial architecture using fiber or copper cables, enabling multiple hosts and storage devices to connect to the FC infrastructure.
sub3TxtTopic7 = Network-Attached Storage (NAS) provides storage access over a network rather than a local connection like a bus. It involves remote connection to file systems, commonly using protocols like NFS and CIFS. This access is facilitated through Remote Procedure Calls (RPC) between hosts and storage, typically using TCP or UDP in an IP network.

##Topic8 - Hijo[9]
tituloTopic8 = RAID Structure
sub1TxtTopic8 = RAID, which stands for Redundant Array of Inexpensive Disks, involves multiple disk units that increase reliability through redundancy, thereby increasing the mean time to failure. This configuration considers mean repair time and exposure time during which another failure could lead to data loss, calculating the mean time to data loss based on these factors. RAID is often combined with NVRAM (Non-Volatile Random Access Memory) to enhance write performance. Several disk usage techniques involve multiple disks working together. For instance, disk striping uses a group of disks as a single storage unit.
sub2TxtTopic8 = RAID can be organized into six different levels. These schemes enhance the performance and reliability of the storage system by storing redundant data. RAID levels include mirroring or shadowing (RAID 1), which duplicates each disk, and configurations like mirrored stripes (RAID 1+0) or striped mirrors (RAID 0+1), offering high performance and reliability. Block interleaved parity (RAID 4, 5, 6) uses significantly less redundancy. However, it's important to note that RAID within a storage set can still fail if the set itself fails. To mitigate this risk, automatic data replication among sets is a common practice. Additionally, some hot spare disks are often left unallocated, automatically replacing a failed disk and rebuilding the data on them.